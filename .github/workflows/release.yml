name: New Release

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'The git ref to checkout (branch, tag, SHA). Defaults to the release tag or the default branch.'
        required: false
        type: string

      verify-version:
        description: 'Verify that the package version matches the release tag.'
        required: true
        type: boolean

      python-version:
        description: 'The Python version to set up. Defaults to 3.12.'
        required: false
        type: string

  release:
    types: [ published ]

permissions:
  contents: read
  packages: write

jobs:
  build_and_publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    env:
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
      POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.POETRY_PYPI_TOKEN_TESTPYPI }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.event.release.tag_name }}

      # Set up Python and cache dependencies
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.12' }}
          cache: pip

      # Upgrade pipx and install Poetry
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pipx install poetry

      # Install dependencies without dev packages and no root
      - name: Install dependencies (no root)
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi --no-root --without dev

      # Verify if the package version matches the release tag (if enabled)
      - name: Verify version against release tag
        if: ${{ github.event.inputs.verify-version != 'false' }}
        run: |
          RELEASE_VERSION=${{ github.event.inputs.ref || github.event.release.tag_name }}
          RELEASE_VERSION=${RELEASE_VERSION#v}

          PACKAGE_VERSION=$(poetry version -s)
          if [ "$RELEASE_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Version mismatch: Release version is '$RELEASE_VERSION' but package version is '$PACKAGE_VERSION'"
            exit 1
          fi

      # Build source distribution and the wheel package
      - name: Build packages (sdist and wheel)
        run: |
          poetry build --no-interaction --no-ansi --clean

      # Publish to PyPI or TestPyPI based on the version pattern
      - name: Publish to PyPI or TestPyPI
        run: |
          if [[ "${{ github.event.inputs.ref || github.event.release.tag_name }}" =~ (pre|rc|dev|test) ]]; then
            echo "Publishing to TestPyPI..."
            poetry publish -r testpypi -u __token__ -p $POETRY_PYPI_TOKEN_TESTPYPI --no-interaction --no-ansi dist/*
          else
            echo "Publishing to PyPI..."
            poetry publish -u __token__ -p $POETRY_PYPI_TOKEN_PYPI --no-interaction --no-ansi dist/*
          fi