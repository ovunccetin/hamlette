name: Build Packages

on:
  workflow_call:
    inputs:
      ref:
        required: false
        type: string
        description: "The git ref to checkout (branch, tag, SHA). Defaults to the default branch."

      python-version:
        required: false
        default: '3.12'
        type: string
        description: "The Python version to set up. Defaults to '3.12'."

      verify-version:
        required: false
        default: false
        type: boolean
        description: "Whether to verify that the package version matches the git tag. Defaults to true."

jobs:
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pipx install poetry

      - name: Install dependencies (no root)
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi --no-root --without dev

      - name: Verify version against release tag
        if: ${{ inputs.verify-version }}
        run: |
          RELEASE_VERSION=${{ github.event.release.tag_name }}
          RELEASE_VERSION=${RELEASE_VERSION#v}

          PACKAGE_VERSION=$(poetry version -s)
          if [ "$RELEASE_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Version mismatch: Release version is '$RELEASE_VERSION' but package version is '$PACKAGE_VERSION'"
            exit 1
          fi

      - name: Build packages (sdist and wheel)
        run: |
          poetry build --no-interaction --no-ansi

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
